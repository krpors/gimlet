package cruft.wtf.gimlet;

import cruft.wtf.gimlet.util.LimitedSizePriorityQueue;
import cruft.wtf.gimlet.util.Xdg;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.function.Consumer;

/**
 * This class holds information on the most recent list of projects.
 */
public class RecentProjectList {

    private static Logger log = LoggerFactory.getLogger(RecentProjectList.class);

    LimitedSizePriorityQueue<String> backingQueue = new LimitedSizePriorityQueue<>(10);

    private static File filename;

    public RecentProjectList() {
        filename = Xdg.getConfigHome().resolve("recent").toFile();
    }

    public void add(String project) {
        backingQueue.push(project);
    }

    public void remove(String project) {
        backingQueue.removeIf(s -> s.equals(project));
    }

    public void load() throws IOException {
        if (!filename.exists()) {
            log.info("Recent projects file '{}' does not exist; creating empty one", filename);
            try {
                if (!filename.createNewFile()) {
                    log.error("Could not create an empty file '{}'", filename);
                }
            } catch (IOException e) {
                log.error("Could not create empty recent projects file!", e);
            }

            return;
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line = null;
            while ((line = reader.readLine()) != null) {
                // ignore comments, if any
                if (line.trim().startsWith("#")) {
                    continue;
                }

                backingQueue.addLast(line);
            }
        }
    }

    public void save() throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            writer.write("# This file is automatically generated by Gimlet.");
            writer.newLine();
            backingQueue.forEach(s -> {
                try {
                    writer.write(s);
                    writer.newLine();
                } catch (IOException e) {
                    log.error("Failed to write line '{}'", s);
                }
            });
        }
    }

    public void forEach(Consumer<? super String> action) {
        backingQueue.forEach(action);
    }
}
